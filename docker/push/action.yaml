name: 'Docker Build and Push'
description: 'Builds the docker image inside the sub directory and pushes it to the registry'
inputs:
  push:
    description: '[string] Push the docker image?'
    required: false
    default: 'true'
  service_name:
    description: '[string] Push the docker image?'
    required: true
  environment:
    description: '[string] Environment to push to (default, stage, prod)'
    required: true
  registry:
    description: '[string] Registry to push the image to'
    default: "ghcr.io"
  sub_dir:
    description: '[string] The directory to find the dockerfile'
    required: true

runs:
  using: "composite"
  steps:
    - name: Validate Inputs
      env:
        PUSH: ${{ inputs.push }}
        SERVICE_NAME: ${{ inputs.service_name }}
        ENVIRONMENT: ${{ inputs.environment }}
        REGISTRY: ${{ inputs.registry }}
        SUB_DIR: ${{ inputs.sub_dir }}
      run: |
        cd ${{ github.action_path }}
        source ../../shell-scripts/input-validator.sh

        declare -A inputs
        inputs[push]="$PUSH"
        inputs[service_name]="$SERVICE_NAME"
        inputs[environment]="$ENVIRONMENT"
        inputs[registry]="$REGISTRY"
        inputs[sub_dir]="$SUB_DIR"

        validateInput inputs
      shell: bash

    - name: "Set image names"
      shell: bash
      env:
        service_name: ${{ inputs.service_name }}
        repo: ${{ github.repository }}
        environment: ${{ inputs.environment }}
      run: |
        echo "IMAGE_NAME=$repo/$environment" >> $GITHUB_ENV

    # Install the cosign tool except on PR
    # https://github.com/sigstore/cosign-installer
    - name: Install cosign
      if: ${{ inputs.push }}
      uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
      with:
        cosign-release: 'v1.13.1'

    # Workaround: https://github.com/docker/build-push-action/issues/461
    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v2

    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      if: ${{ inputs.push }}
      uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ env.GITHUB_TOKEN }}

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract ${{ inputs.service_name }} Docker metadata
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,enable=true,priority=600,prefix=${{ inputs.service_name }}-,suffix=,event=branch
          type=ref,enable=true,priority=600,prefix=${{ inputs.service_name }}-,suffix=,event=tag

    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker ${{ inputs.service_name }} image
      id: build-and-push
      uses: docker/build-push-action@v4
      with:
        context: "{{defaultContext}}:${{ inputs.sub_dir }}"
        push: ${{ inputs.push }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Sign the resulting Docker image digest except on PRs.
    # This will only write to the public Rekor transparency log when the Docker
    # repository is public to avoid leaking data.  If you would like to publish
    # transparency data even for private images, pass --force to cosign below.
    # https://github.com/sigstore/cosign
    - name: Sign the published Docker ${{ inputs.service_name }} image
      shell: bash
      if: ${{ inputs.push }}
      env:
        COSIGN_EXPERIMENTAL: "true"
      # This step uses the identity token to provision an ephemeral certificate
      # against the sigstore community Fulcio instance.
      run: echo "${{ steps.meta-live-chat.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
