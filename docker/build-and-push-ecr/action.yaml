name: "Docker Build and Push to ECR"
description: "Builds an image and pushes it to ecr"
inputs:
  image_name:
    description: "[string] Name of the image to push"
    required: true
  image_version:
    description: "[string] Version of the image to push"
    required: true
  aws_account_id:
    description: "[number] AWS account id to push the ECR image into"
    required: true
  docker_sub_dir:
    description: "[string] The directory to find the dockerfile"
    required: true
outputs:
  ECR_IMAGE_NAME:
    description: "[string] The name of the copied image into ecr"
    value: ${{ steps.image-name.outputs.ECR_IMAGE_NAME }}
  ECR_IMAGE_URI:
    description: "[string] Full uri with tag of the image uploaded to ecr"
    value: ${{ steps.image-uri.outputs.ECR_IMAGE_URI }}

runs:
  using: "composite"
  steps:
    - name: Pull
      uses: actions/checkout@v4
    - name: Validate Inputs
      env:
        image_name: ${{ inputs.image_name }}
        image_version: ${{ inputs.image_version }}
        aws_account_id: ${{ inputs.aws_account_id }}
        docker_sub_dir: ${{ inputs.docker_sub_dir }}
      run: |
        cd ${{ github.action_path }}
        source ../../shell-scripts/input-validator.sh

        declare -A inputs
        inputs[image_name]="$image_name"
        inputs[image_version]="$image_version"
        inputs[aws_account_id]="$aws_account_id"
        inputs[docker_sub_dir]="$docker_sub_dir"

        validateInput inputs
      shell: bash

    # Switch to the target account to log into ecr and push
    - name: Configure AWS credentials for ${{ inputs.aws_account_id }} account
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ env.GH_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.GH_AWS_SECRET_KEY }}
        aws-region: us-west-2
        role-to-assume: arn:aws:iam::${{ inputs.aws_account_id }}:role/terraform-runnner-role
        role-duration-seconds: 3600 # 60 min
        role-skip-session-tagging: true

    - name: "Set image names"
      shell: bash
      id: image-name
      env:
        image_name: ${{ inputs.image_name }}
      run: |
        echo "ECR_IMAGE_NAME=$image_name" >> $GITHUB_ENV
        echo "ECR_IMAGE_NAME=$image_name" >> $GITHUB_OUTPUT

    - name: "Set image uris"
      id: image-uri
      shell: bash
      env:
        image_version: ${{ inputs.image_version }}
        ACCOUNT_ID: ${{ inputs.aws_account_id }}
      run: |
        ECR_TRIMMED_IMAGE_VERSION=$(echo $ECR_IMAGE_VERSION | tr / -)
        URI="$ACCOUNT_ID.dkr.ecr.us-west-2.amazonaws.com/$ECR_IMAGE_NAME:$image_version"
        echo "ECR_IMAGE_URI=$URI" >> $GITHUB_ENV
        echo "ECR_IMAGE_URI=$URI" >> $GITHUB_OUTPUT

    - name: Login to ECR
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.aws_account_id }}.dkr.ecr.us-west-2.amazonaws.com

    - name: Build image and push to ecr
      shell: bash
      run: |
        cd ${{ inputs.docker_sub_dir }}
        ls -la 
        docker build -f $ECR_IMAGE_URI/Dockerfile .
        docker push $ECR_IMAGE_URI

    - name: Configure AWS credentials for shared account
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ env.GH_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.GH_AWS_SECRET_KEY }}
        aws-region: us-west-2
