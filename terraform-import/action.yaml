name: 'Terraform Import'
description: 'Runs terraform import using resource id and resource name.'
inputs:
  ssh_key:
    description: '[secret] [required] GitHub SSH Key for pulling repo.'
    required: true
  terraform_version:
    description: '[decimal] [required] (i.e. 1.0.11) Terraform version to use.'
    required: true
  terraform_workspace:
    description: '[string] (i.e. ninja/prod-east) TF Workspace to create if tf_create_workspace input = true.'
    required: true
  resource_id:
    description: "[resource_id] [required] (i.e. 45188095) ID of the TF Resource being imported."
    required: true
  resource_name:
    description: "[resource_name] [required] (i.e. datadog_monitor.platform-browser-identity-status). Type and name of the resource that will be in your TF File in dot notation."
    required: true
  is_kubernetes_resource:
    description: "[is_kubernetes_resource] [optional] This will force a 'terraform refresh' before the import which is required for kubernetes resources due to shortlived tokens from eks."
    required: false
  dry_run:
    description: "[dry_run] [required] (i.e. true/false). If you wish to skip updating the TF State File."
    required: true
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Validate Inputs
      env:
        SSH_KEY: ${{ inputs.ssh_key }}
        TERRAFORM_VERSION: ${{ inputs.terraform_version }}
        TERRAFORM_WORKSPACE: ${{ inputs.terraform_workspace }}
        RESOURCE_ID: ${{ inputs.resource_id }}
        RESOURCE_NAME: ${{ inputs.resource_name }}
        DRY_RUN: ${{ inputs.dry_run }}
      run: |
        cd ${{ github.action_path }}
        source ../shell-scripts/input-validator.sh

        declare -A inputs
        inputs[terraform_version]="$TERRAFORM_VERSION"
        inputs[terraform_workspace]="$TERRAFORM_WORKSPACE"
        inputs[resource_id]="$RESOURCE_ID"
        inputs[resource_name]="$RESOURCE_NAME"
        inputs[dry_run]="$DRY_RUN"

        validateInput inputs
      shell: bash
    - name: Install SSH Key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ inputs.ssh_key }}
    - name: Pull
      uses: actions/checkout@v3
    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: ${{ inputs.terraform_version }}
    - name: Initialize Terraform
      run: |
        terraform version
        terraform init -lock=false -input=false
        terraform workspace select ${{ inputs.terraform_workspace }}
        terraform workspace show
      shell: bash
    - name: Dry Run
      if: ${{ inputs.dry_run == 'true' }}
      run: |
        RED='\033[0;31m'
        NC='\033[0m'
        printf "${RED}Below are the list of commands that will run:${NC}\n"
        printf "\n%s" "terraform version"
        printf "\n%s" "terraform init -lock=false -input=false"
        printf "\n%s" "terraform workspace select ${{ inputs.tf_workspace }}"
        printf "\n%s" "terraform import -input=false ${{ inputs.resource_name }} ${{ inputs.resource_id }}"
        printf "\n%s" "terraform show"
        printf "\n\n${RED}Please make sure to do the following when doing the actual import:${NC}"
        printf "\n${RED}1.${NC} Before running the import make sure you enter an empty resource in a .tf file in your root (resource \"github_repository\" \"this-is-an-example\" {})."
        printf "\n${RED}2.${NC} After the import runs successfully, search for your resource in the ${RED}Console Output${NC} and copy all of the attributes."
        printf "\n${RED}3.${NC} Copy/paste the attributes into the empty resource you created."
        printf "\n${RED}4.${NC} Comment out all but the required attributes and trigger another plan."
        printf "\n${RED}5.${NC} Uncomment any attributes that ${RED}show a diff with the state file${NC} or you feel should be controlled via the configuration file."
        printf "\n${RED}6.${NC} Once the terraform plan runs with no changes to infrastructure for the imported resource, remove the code comments and merge your changes."
      shell: bash
    - name: Update Terraform State File - If dry_run == 'false'
      if: ${{ inputs.dry_run == 'false' && inputs.is_kubernetes_resource == 'true'}}
      run: |
        if [ ${{ inputs.terraform_workspace }} != "default" ]; then
          terraform refresh -var-file=vars/${{ inputs.terraform_workspace }}.tfvars
        else
          terraform refresh
        fi
      shell: bash
    - name: Update Terraform State File - If dry_run == 'false'
      if: ${{ inputs.dry_run == 'false' }}
      run: |
        if [ ${{ inputs.terraform_workspace }} != "default" ]; then
          terraform import -var-file=vars/${{ inputs.terraform_workspace }}.tfvars -input=false ${{ inputs.resource_name }} ${{ inputs.resource_id }}
        else
          terraform import -input=false ${{ inputs.resource_name }} ${{ inputs.resource_id }}
        fi
      shell: bash
    - name: Show Terraform State File - Find resource that was imported
      if: ${{ inputs.dry_run == 'false' }}
      run: |
        terraform state show ${{ inputs.resource_name }}
      shell: bash
